#!/usr/bin/env python
import pysat.solvers
from pysat.formula import CNF
import argparse
import minimal_model.utils
import sys


def parse_argument():
    pysat_help = '''The solver name of pysat, the cli will depend itï¼Œyou can select followed options
    cadical     = ('cd', 'cdl', 'cadical')
    glucose3    = ('g3', 'g30', 'glucose3', 'glucose30')
    glucose4    = ('g4', 'g41', 'glucose4', 'glucose41')
    lingeling   = ('lgl', 'lingeling')
    maplechrono = ('mcb', 'chrono', 'maplechrono')
    maplecm     = ('mcm', 'maplecm')
    maplesat    = ('mpl', 'maple', 'maplesat')
    minicard    = ('mc', 'mcard', 'minicard')
    minisat22   = ('m22', 'msat22', 'minisat22')
    minisatgh   = ('mgh', 'msat-gh', 'minisat-gh')
    '''
    parser = argparse.ArgumentParser(description='A cli to compute a minimal model given by argument',
                                     formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('file', help='The path of CNF file')
    parser.add_argument('--pysat', help=pysat_help, default='m22')
    parser.add_argument('--mem-limit', help="Limit on memory usage in megabytes. zero is unlimited", default=0,
                        type=int)
    parser.add_argument('--time-limit', help="Limit on CPU time allowed in seconds.zero is unlimited", default=0,
                        type=int)
    parser.add_argument('--recursion-limit', help="recursion limit", default=1000, type=int)
    parser.add_argument('--mod', help='Select a algorithm use to compute minimal model', choices=['MR', 'MM'],
                        default='MM')
    parser.add_argument('--simply', help='If it true cli will print minimal model only value is positive', type=bool,
                        default='False')
    parser.add_argument('--mr', action='store_true', help='apply mr to every computing step')
    return parser.parse_args()


solver = None


def print_status():
    if solver is None:
        return
    solver.print_status()


if __name__ == "__main__":
    args = parse_argument()
    sys.setrecursionlimit(args.recursion_limit)
    try:
        if args.mem_limit:
            minimal_model.utils.limit_memory(args.mem_limit)
        formula = CNF(from_file=args.file)
        solver = minimal_model.solvers.Solver(args.mod, mr=args.mr, pysat_name=args.pysat)
        solver.append_formula(formula)
        if args.time_limit:
            minimal_model.utils.limit_time(args.time_limit)
        (sat, model) = solver.compute_minimal_model()
        cpu_time = minimal_model.utils.get_cpu_time()
        used_mem = minimal_model.utils.get_used_memory()
        print_status()
        if sat:
            print("SATISFIABLE")
            model = [x for x in model if x > 0] if args.simply else model
            print(model)
        else:
            print("UNSATISFIABLE")
    except pysat.solvers.NoSuchSolverError as identifier:
        print("No such pysat solver named {}".format(identifier), file=sys.stderr)
    except FileNotFoundError as e:
        print("CNF file {} don't exist".format(args.file), file=sys.stderr)
    except MemoryError as e:
        print("Interrupt by memory limit")
        print_status()
        print("***INTERRUPT")
    except BaseException as b:
        print("Interrupt by BaseException", b)
        print_status()
        print("***INTERRUPT")
